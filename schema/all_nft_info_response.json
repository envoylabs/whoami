{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "AllNftInfoResponse",
  "type": "object",
  "required": [
    "access",
    "info"
  ],
  "properties": {
    "access": {
      "description": "Who can transfer the token",
      "allOf": [
        {
          "$ref": "#/definitions/OwnerOfResponse"
        }
      ]
    },
    "info": {
      "description": "Data on the token itself,",
      "allOf": [
        {
          "$ref": "#/definitions/NftInfoResponse_for_Metadata"
        }
      ]
    }
  },
  "definitions": {
    "Approval": {
      "type": "object",
      "required": [
        "expires",
        "spender"
      ],
      "properties": {
        "expires": {
          "description": "When the Approval expires (maybe Expiration::never)",
          "allOf": [
            {
              "$ref": "#/definitions/Expiration"
            }
          ]
        },
        "spender": {
          "description": "Account that can transfer/send the token",
          "type": "string"
        }
      }
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "EmbeddedLogo": {
      "description": "This is used to store the logo on the blockchain in an accepted format. Enforce maximum size of 5KB on all variants.",
      "oneOf": [
        {
          "description": "Store the Logo as an SVG file. The content must conform to the spec at https://en.wikipedia.org/wiki/Scalable_Vector_Graphics (The contract should do some light-weight sanity-check validation)",
          "type": "object",
          "required": [
            "svg"
          ],
          "properties": {
            "svg": {
              "$ref": "#/definitions/Binary"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Store the Logo as a PNG file. This will likely only support up to 64x64 or so within the 5KB limit.",
          "type": "object",
          "required": [
            "png"
          ],
          "properties": {
            "png": {
              "$ref": "#/definitions/Binary"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Expiration": {
      "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
      "oneOf": [
        {
          "description": "AtHeight will expire when `env.block.height` >= height",
          "type": "object",
          "required": [
            "at_height"
          ],
          "properties": {
            "at_height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "AtTime will expire when `env.block.time` >= time",
          "type": "object",
          "required": [
            "at_time"
          ],
          "properties": {
            "at_time": {
              "$ref": "#/definitions/Timestamp"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Never will never expire. Used to express the empty variant",
          "type": "object",
          "required": [
            "never"
          ],
          "properties": {
            "never": {
              "type": "object"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Logo": {
      "description": "This is used for uploading logo data, or setting it in InstantiateData",
      "oneOf": [
        {
          "description": "A reference to an externally hosted logo. Must be a valid HTTP or HTTPS URL.",
          "type": "object",
          "required": [
            "url"
          ],
          "properties": {
            "url": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Logo content stored on the blockchain. Enforce maximum size of 5KB on all variants",
          "type": "object",
          "required": [
            "embedded"
          ],
          "properties": {
            "embedded": {
              "$ref": "#/definitions/EmbeddedLogo"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Metadata": {
      "type": "object",
      "properties": {
        "contract_address": {
          "type": [
            "string",
            "null"
          ]
        },
        "discord_id": {
          "type": [
            "string",
            "null"
          ]
        },
        "email": {
          "type": [
            "string",
            "null"
          ]
        },
        "external_url": {
          "type": [
            "string",
            "null"
          ]
        },
        "image": {
          "type": [
            "string",
            "null"
          ]
        },
        "image_data": {
          "anyOf": [
            {
              "$ref": "#/definitions/Logo"
            },
            {
              "type": "null"
            }
          ]
        },
        "keybase_id": {
          "type": [
            "string",
            "null"
          ]
        },
        "parent_token_id": {
          "description": "For future compatibility, we want to support a recursive lookup of tokens that constitutes a path somewhat like a DNS if this is None then it is a base token",
          "type": [
            "string",
            "null"
          ]
        },
        "pgp_public_key": {
          "description": "A public key",
          "type": [
            "string",
            "null"
          ]
        },
        "public_bio": {
          "type": [
            "string",
            "null"
          ]
        },
        "public_name": {
          "type": [
            "string",
            "null"
          ]
        },
        "telegram_id": {
          "type": [
            "string",
            "null"
          ]
        },
        "twitter_id": {
          "type": [
            "string",
            "null"
          ]
        },
        "validator_operator_address": {
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "NftInfoResponse_for_Metadata": {
      "type": "object",
      "required": [
        "extension"
      ],
      "properties": {
        "extension": {
          "description": "You can add any custom metadata here when you extend cw721-base",
          "allOf": [
            {
              "$ref": "#/definitions/Metadata"
            }
          ]
        },
        "token_uri": {
          "description": "Universal resource identifier for this NFT Should point to a JSON file that conforms to the ERC721 Metadata JSON Schema",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "OwnerOfResponse": {
      "type": "object",
      "required": [
        "approvals",
        "owner"
      ],
      "properties": {
        "approvals": {
          "description": "If set this address is approved to transfer/send the token as well",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Approval"
          }
        },
        "owner": {
          "description": "Owner of the token",
          "type": "string"
        }
      }
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
