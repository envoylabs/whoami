{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "admin_address",
    "name",
    "native_decimals",
    "native_denom",
    "symbol"
  ],
  "properties": {
    "admin_address": {
      "description": "The admin address for the contract replaces the minter field as minting is permissionless",
      "type": "string"
    },
    "base_mint_fee": {
      "description": "An optional fee, paid to the admin_address half is burned by default, you have to override this in mint if that's not ok with you",
      "anyOf": [
        {
          "$ref": "#/definitions/Uint128"
        },
        {
          "type": "null"
        }
      ]
    },
    "burn_percentage": {
      "description": "An optional percentage of the mint fee to burn",
      "type": [
        "integer",
        "null"
      ],
      "format": "uint64",
      "minimum": 0.0
    },
    "name": {
      "description": "Name of the NFT contract",
      "type": "string"
    },
    "native_decimals": {
      "description": "The decimals of the token Same format as decimals above, eg. if it is uatom, where 1 unit is 10^-6 ATOM, use 6 here",
      "type": "integer",
      "format": "uint8",
      "minimum": 0.0
    },
    "native_denom": {
      "description": "The token name of the native denom, e.g. ujuno uatom",
      "type": "string"
    },
    "short_name_surcharge": {
      "description": "An optional surcharge for short names e.g. anything below 5 gets an additional charge this plus base_mint_fee are combined to come up with a total mint fee this is assumed to be in native_denom for now, no other option is available, so if you e.g. want 1 ATOM, use 1000000 as this value (i.e. it is uatom)",
      "anyOf": [
        {
          "$ref": "#/definitions/SurchargeInfo"
        },
        {
          "type": "null"
        }
      ]
    },
    "symbol": {
      "description": "Symbol of the NFT contract",
      "type": "string"
    },
    "token_cap": {
      "description": "Is there a token cap for this contract? i.e. a cap for number of tokens an address can manage it's a blunt tool against hoarding.",
      "type": [
        "integer",
        "null"
      ],
      "format": "uint32",
      "minimum": 0.0
    },
    "username_length_cap": {
      "description": "The cap for a username length can be updated later by the admin_address",
      "type": [
        "integer",
        "null"
      ],
      "format": "uint32",
      "minimum": 0.0
    }
  },
  "definitions": {
    "SurchargeInfo": {
      "type": "object",
      "required": [
        "surcharge_fee",
        "surcharge_max_characters"
      ],
      "properties": {
        "surcharge_fee": {
          "description": "The surcharge fee. This plus any base mint fee add up to the total fixed cost of minting an NFT username this is assumed to be in native_denom for now, no other option is available, so if you e.g. want 1 ATOM, use 1000000 as this value (i.e. it is uatom)",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "surcharge_max_characters": {
          "description": "Max characters that are affected by the surcharge e.g. 5",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
